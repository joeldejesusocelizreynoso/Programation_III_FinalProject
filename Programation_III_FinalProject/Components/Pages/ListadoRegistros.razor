@* Joel De Jesús Oseliz Reynoso - 20231132 *@
@page "/listado"
@rendermode InteractiveServer
@inject NavigationManager NavMan
@inject IJSRuntime JSx
@using System.Text.Json

<PageTitle>Listado de Registros</PageTitle>

<h1 class="fw-bolder text-center mt-5 mb-5">Listado de Registros</h1>

<div class="mb-3 row">
    <div class="col-6">
        <InputText @bind-Value="filtro" placeholder="Buscar por cualquier campo..." class="form-control" @oninput="FiltrarRegistros" />
    </div>
    <div class="col-2">
        <button id="LimpiarBuscador" class="btn btn-danger w-100 fw-bold" @onclick="LimpiarBuscador">Limpiar</button>
    </div>
    <div class="col-2">
        <button id="NuevoRegistro" class="btn btn-primary w-100 fw-bold" @onclick="NuevoRegistro">Nuevo Registro</button>
    </div>
    <div class="col-2">
        <button id="PaginaPrincipal" class="btn btn-secondary w-100 fw-bold" @onclick="PaginaPrincipal">Volver</button>
    </div>
</div>

@if (registrosFiltrados.Count == 0)
{
    <div id="AlertaDatosInexistentes" class="alert alert-info" role="alert">
        No se encontraron registros que coinciden con la búsqueda.
    </div>
}
else
{
    <table id="TablaListadoRegistros" class="table table-striped table-bordered mb-5">
        <thead id="TablaListadoRegistroEnunciados" class="bg-secondary text-white">
            <tr>
                <th class="text-center">Fecha</th>
                <th class="text-center">Matrícula</th>
                <th class="text-center">Nombre</th>
                <th class="text-center">Apellido</th>
                <th class="text-center">Curso</th>
                <th class="text-center">Motivo</th>
                <th class="text-center">Acciones</th>
            </tr>
        </thead>
        <tbody id="TablaListadoRegistrosContenido">
            @foreach (var registro in registrosFiltrados)
            {
                <tr>
                    <td id="Contenido" class="text-center fw-bold">@registro.Fecha</td>
                    <td id="Contenido" class="text-center fw-bold">@((registro.Matricula.Length > 20) ? @registro.Matricula.Substring(0, 20) + "..." : @registro.Matricula)</td>
                    <td id="Contenido" class="text-center">@((registro.Nombre.Length > 20) ? @registro.Nombre.Substring(0, 20) + "..." : @registro.Nombre)</td>
                    <td id="Contenido" class="text-center">@((registro.Apellido.Length > 20) ? @registro.Apellido.Substring(0, 20) + "..." : @registro.Apellido)</td>
                    <td id="Contenido" class="text-center">@((registro.Curso.Length > 20) ? @registro.Curso.Substring(0, 20) + "..." : @registro.Curso)</td>
                    <td id="Contenido" class="text-center">@((registro.Motivo.Length > 20) ? @registro.Motivo.Substring(0, 20) + "..." : @registro.Motivo)</td>
                    <td id="Contenido" class="btn btn-group-sm">
                        <button id="EditarDatos" @onclick="() => editarFila(registro)" class="btn btn-success fw-bold">Editar</button>
                        <button id="EliminarDatos" @onclick="() => eliminarFila(registro)" class="btn btn-danger fw-bold">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Reporte> registros = new List<Reporte>();
    List<Reporte> registrosFiltrados = new List<Reporte>();
    string filtro = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var registrosJson = await JSx.InvokeAsync<string>("localStorage.getItem", "registros");

            if (registrosJson != null)
            {
                registros = JsonSerializer.Deserialize<List<Reporte>>(registrosJson) ?? new List<Reporte>();
                registrosFiltrados = new List<Reporte>(registros);
            }
            else
            {
                registros = new List<Reporte>();
                registrosFiltrados = new List<Reporte>();
            }

            StateHasChanged();
        }
    }

    private void NuevoRegistro()
    {
        NavMan.NavigateTo("/listado/nuevo");
    }

    private void editarFila(Reporte registro)
    {
        NavMan.NavigateTo("listado/editar/" + registro.Id);
    }

    // private async Task eliminarFila(Reporte registro)
    // {
    //     var confirmacion = await JSx.InvokeAsync<bool>("confirm", "¿Está segur@ de eliminar el registro?");

    //     if (confirmacion)
    //     {
    //         registros.RemoveAll(r => r.Id == registro.Id);
    //         registrosFiltrados.RemoveAll(r => r.Id == registro.Id);

    //         await JSx.InvokeVoidAsync("localStorage.setItem", "registros", JsonSerializer.Serialize(registros));
    //         await InvokeAsync(StateHasChanged);
    //         await JSx.InvokeVoidAsync("alert", "Registro eliminado exitosamente.");
    //     }
    // }

    // Esta parte de arriba es la misma que la de abajo (esta), es solo que dejé la de arriba en caso de que se quisiera hacer más validaciones al momento de eliminar registros. Cabe destacar el hecho de que la parte del código de arriba que está comentado es completamente funcional siempre y cuando no se le haga prueba automatizada, ya que la prueba automatizada no maneja del todo los cuadros de diálogos. Ahora bien, si no se le hace prueba automatizada se puede (si se quiere) usar la parte de arriba y no esta, la parte de abajo.

    private async Task eliminarFila(Reporte registro)
    {
        registros.RemoveAll(r => r.Id == registro.Id);
        registrosFiltrados.RemoveAll(r => r.Id == registro.Id);

        await JSx.InvokeVoidAsync("localStorage.setItem", "registros", JsonSerializer.Serialize(registros));
        await InvokeAsync(StateHasChanged);
    }


    private void FiltrarRegistros(ChangeEventArgs e)
    {
        filtro = e.Value.ToString().ToLower();

        registrosFiltrados = registros.Where(r =>
            r.Matricula.ToLower().Contains(filtro) ||
            r.Nombre.ToLower().Contains(filtro) ||
            r.Apellido.ToLower().Contains(filtro) ||
            r.Curso.ToLower().Contains(filtro) ||
            r.Motivo.ToLower().Contains(filtro) ||
            r.Fecha.ToString("yyyy-MM-dd").Contains(filtro)
        ).ToList();

        StateHasChanged();
    }

    private void LimpiarBuscador()
    {
        filtro = "";
        registrosFiltrados = new List<Reporte>(registros);
        StateHasChanged();
    }

    private void PaginaPrincipal()
    {
        NavMan.NavigateTo("/");
    }

}
